{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"surfraw-tools \u00b6 surfraw-tools is a suite of command-line tools to generate surfraw elvi easily. Hosted on GitHub . Documentation is hosted on GitHub Pages . The following are currently provided: mkelvis : generate an elvis opensearch2elvis : generate an elvis for an OpenSearch-enabled website Installation \u00b6 surfraw-tools is available on PyPI . Use pipx . It\u2019s available in many distro repositories. pipx install surfraw-tools See INSTALL.md for more details. Quickstart \u00b6 Generate a simple elvis \u00b6 # these two are equivalent: https is the default url scheme mkelvis yourelvisname example.com 'example.com/search?q=' mkelvis yourelvisname https://example.com 'https://example.com/search?q=' # use http for insecure websites mkelvis yourelvisname --insecure example.com 'example.com/search?q=' mkelvis yourelvisname http://example.com 'http://example.com/search?q=' # with a description mkelvis yourelvisname --description='Search Example for bliks' https://example.com 'https://example.com/search?q=' # to align in `sr-elvi` mkelvis yourelvisname --num-tabs=NUM https://example.com 'https://example.com/search?q=' Leave the q URL parameter with an empty value because the search terms will be appended to it when yourelvisname runs. The first URL is where the elvis takes you when no search terms have been passed. Create an elvis for an OpenSearch -enabled website \u00b6 # find and download the OpenSearch description file, and then generate opensearch2elvis yourelvisname https://example.com # any HTML page under the domain should work # download an OpenSearch description file and then generate opensearch2elvis yourelvisname https://example.com/opensearch.xml # generate from a local OpenSearch description file opensearch2elvis yourelvisname opensearch.xml The created elvis will be placed in the current directory with the name yourelvisname , and ready for installation (made executable, shebang added). See the advanced usage docs for more. Caveats \u00b6 The generated elvi include tab-completion code using the system of elvi-specific completions set for release in the new version of Surfraw. Wait for the new release, or build surfraw from master to use it. If you don\u2019t want to use the completions, use the --no-completions option. This isn\u2019t needed though: the elvi still work but there might be a few error messages. Also, opensearch2elvis only has minimal support for websites that specify POST method searches. Currently, it just treats them as if they specified GET and hopes for the best. I plan to support this . Features ( mkelvis ) \u00b6 allows * characters in queries without spewing out contents of directories from globbing usable, automatically-generated --local-help and -elvi output with control over some aspects of formatting readable output elvi with explanatory comments and templates elvi-specific tab-completions ( NOTE: uses unreleased features of surfraw ) easy-to-generate options, with types for different uses shortcuts to generate common surfraw options: -result=NUM and -language=ISOCODE declarative option syntax with access to the shell for some options the topic variable ( $it ) is available for some options map surfraw-option values to url parameters \u201cinline\u201d surfraw-option values to search query keywords mutate variables in shell case-statements See the reference and advanced usage docs for more. Contributing \u00b6 Set up a development environment \u00b6 python3 -m venv env . env/bin/activate pip install -r requirements/dev.txt pip install -e . Also ensure that you have GNU Make and (Universal) Ctags. On Debian, Ubuntu, and their derivatives: sudo apt install make universal-ctags Before submitting a pull request \u00b6 make -k format check-dev Make sure that no new errors were introduced after your changes. Copyright \u00b6 This project is licensed under the Apache License 2.0 (sic) and follows the REUSE licencing guidelines . Some auxiliary files have a different licence. Check their file headers or .reuse/dep5 for details. Copies of the licences used in this project can be located in the LICENSES/ directory, per the REUSE guidelines. Written by Gabriel Lisaca \u2013 gabriel.lisaca (replace me with at) gmail dot com","title":"Home"},{"location":"#surfraw-tools","text":"surfraw-tools is a suite of command-line tools to generate surfraw elvi easily. Hosted on GitHub . Documentation is hosted on GitHub Pages . The following are currently provided: mkelvis : generate an elvis opensearch2elvis : generate an elvis for an OpenSearch-enabled website","title":"surfraw-tools"},{"location":"#installation","text":"surfraw-tools is available on PyPI . Use pipx . It\u2019s available in many distro repositories. pipx install surfraw-tools See INSTALL.md for more details.","title":"Installation"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#generate-a-simple-elvis","text":"# these two are equivalent: https is the default url scheme mkelvis yourelvisname example.com 'example.com/search?q=' mkelvis yourelvisname https://example.com 'https://example.com/search?q=' # use http for insecure websites mkelvis yourelvisname --insecure example.com 'example.com/search?q=' mkelvis yourelvisname http://example.com 'http://example.com/search?q=' # with a description mkelvis yourelvisname --description='Search Example for bliks' https://example.com 'https://example.com/search?q=' # to align in `sr-elvi` mkelvis yourelvisname --num-tabs=NUM https://example.com 'https://example.com/search?q=' Leave the q URL parameter with an empty value because the search terms will be appended to it when yourelvisname runs. The first URL is where the elvis takes you when no search terms have been passed.","title":"Generate a simple elvis"},{"location":"#create-an-elvis-for-an-opensearch-enabled-website","text":"# find and download the OpenSearch description file, and then generate opensearch2elvis yourelvisname https://example.com # any HTML page under the domain should work # download an OpenSearch description file and then generate opensearch2elvis yourelvisname https://example.com/opensearch.xml # generate from a local OpenSearch description file opensearch2elvis yourelvisname opensearch.xml The created elvis will be placed in the current directory with the name yourelvisname , and ready for installation (made executable, shebang added). See the advanced usage docs for more.","title":"Create an elvis for an OpenSearch-enabled website"},{"location":"#caveats","text":"The generated elvi include tab-completion code using the system of elvi-specific completions set for release in the new version of Surfraw. Wait for the new release, or build surfraw from master to use it. If you don\u2019t want to use the completions, use the --no-completions option. This isn\u2019t needed though: the elvi still work but there might be a few error messages. Also, opensearch2elvis only has minimal support for websites that specify POST method searches. Currently, it just treats them as if they specified GET and hopes for the best. I plan to support this .","title":"Caveats"},{"location":"#features-mkelvis","text":"allows * characters in queries without spewing out contents of directories from globbing usable, automatically-generated --local-help and -elvi output with control over some aspects of formatting readable output elvi with explanatory comments and templates elvi-specific tab-completions ( NOTE: uses unreleased features of surfraw ) easy-to-generate options, with types for different uses shortcuts to generate common surfraw options: -result=NUM and -language=ISOCODE declarative option syntax with access to the shell for some options the topic variable ( $it ) is available for some options map surfraw-option values to url parameters \u201cinline\u201d surfraw-option values to search query keywords mutate variables in shell case-statements See the reference and advanced usage docs for more.","title":"Features (mkelvis)"},{"location":"#contributing","text":"","title":"Contributing"},{"location":"#set-up-a-development-environment","text":"python3 -m venv env . env/bin/activate pip install -r requirements/dev.txt pip install -e . Also ensure that you have GNU Make and (Universal) Ctags. On Debian, Ubuntu, and their derivatives: sudo apt install make universal-ctags","title":"Set up a development environment"},{"location":"#before-submitting-a-pull-request","text":"make -k format check-dev Make sure that no new errors were introduced after your changes.","title":"Before submitting a pull request"},{"location":"#copyright","text":"This project is licensed under the Apache License 2.0 (sic) and follows the REUSE licencing guidelines . Some auxiliary files have a different licence. Check their file headers or .reuse/dep5 for details. Copies of the licences used in this project can be located in the LICENSES/ directory, per the REUSE guidelines. Written by Gabriel Lisaca \u2013 gabriel.lisaca (replace me with at) gmail dot com","title":"Copyright"},{"location":"advanced-usage/","text":"Advanced usage \u00b6 Elvi with search options \u00b6 mkelvis allows you to create elvi with options like -sort= and -results=NUM seen in many existing elvi. We\u2019ll create an elvis for Reddit\u2013starting simple and building up functionality. The end-result is based on commit a8ec5a7833e44df9cc3d9f56dc6cf7aa69d13e8c from my elvi repo . Name your file reddit.in and create a Makefile with these contents: reddit: reddit.in grep -v '^[[:space:]]*\\#' < $< | xargs mkelvis $@ Including the elvis name in the command means that we don\u2019t have to include them in the file. This makes expanding this to more elvi easier. The grep call also allows line comments with # . Bookmark-like elvis \u00b6 www.reddit.com www.reddit.com/search?q= --description='Search Reddit' This doesn\u2019t give us much more than the bookmarks that surfraw allows: a line of reddit https://www.reddit.com/search?q=%s in your bookmarks file would be enough to reimplement this. The --description= isn\u2019t strictly needed since it defaults to Search $elvisname . Sorting and date-restricting \u00b6 www.reddit.com www.reddit.com/search? --description='Search Reddit' --enum=sort:relevance:relevance,hot,top,new,comments --map=sort:sort --enum=time:all-time:hour,day,week,year,all-time --collapse=time:all-time,all --map=time:t --query-parameter=q This provides -sort= and -time= options to define how the search is sorted and how far back you want your results to be. Run ./reddit -lh and you\u2019ll see it nicely formatted for you with your options: Usage: reddit [options] [search words]... Description: Search Reddit (www.reddit.com) Local options: -sort=SORT An enum option for 'sort' relevance | hot | top | new | comments | Default: relevance Environment: SURFRAW_reddit_sort -time=TIME An enum option for 'time' hour | day | week | year | all-time | Default: all-time Environment: SURFRAW_reddit_time We can override the descriptions and metavars of options with --describe= and --metavar= respectively. We\u2019ll do that later. -sort= \u00b6 --enum=sort:relevance:relevance,hot,top,new,comments : this defines the -sort= option, says the default value is relevance , and then defines all of the valid values: relevance , hot , top , new , and comments . The default ( relevance ) must be included in that list of valid values. mkelvis will exit with an error otherwise. --map=sort:sort : this says that it\u2019s mapping the sort variable (defined above, but order doesn\u2019t matter) to the sort URL query string parameter. In the URL, it will appear like sort=$SURFRAW_reddit_sort . -time= \u00b6 --enum=time:all-time:hour,day,week,year,all-time : this defines the date-restricting option you can see on Reddit. Like with sort , we can see that it defaults to all-time \u2013out of hour , day , week , year , all-time . --map=time:t : it\u2019s mapped to the t parameter. --collapse=time:all-time,all : this says that if the time variable has the exact value of all-time , it should be replaced with all . This allows us to define a nicer interface for our elvis\u2013not being bound to what the search engine\u2019s parameter values actually are. In fact, each colon-delimited ( : ) argument after the first one can be comma-delimited ( , ) lists of patterns describing these changes. See the reference for more. Now, a problem with our previous version is that it would be hard for mkelvis to decide what order to append the mappings and the search terms in. The --query-parameter/-Q option solves this for us. The q= suffix can now be removed from the search URL because this will be appended to it later. Keyword search \u00b6 www.reddit.com www.reddit.com/search? --description='Search Reddit' --enum=sort:relevance:relevance,hot,top,new,comments --map=sort:sort --enum=time:all-time:hour,day,week,year,all-time --collapse=time:all-time,all --map=time:t --yes-no=nsfw:no --inline=nsfw:nsfw --describe=nsfw:'Whether to include NSFW posts' --anything=flair: --inline=flair:flair --enum=self:any:any,only,none --collapse=self:any,:only,yes:none,no --inline=self:self --describe=self:'Whether to include text posts' --query-parameter=q This gives us an elvis that unifies the syntax of searches with URL query parameters and searches with keywords such as site:github.com to limit results to github.com . -nsfw= \u00b6 --yes-no=nsfw:no : this defines a boolean option, corresponding to the values that have the surfraw functions ok , yesno , ifyes , and ifno , called on it. It\u2019s called nsfw , and has a default value of no . In the elvis, you\u2019d be able to use -nsfw=yes , -nsfw=no , -nsfw=on , -nsfw=off , -nsfw=1 , -nsfw=0 . They\u2019re treated the same. --inline=nsfw:nsfw : this places the value of nsfw inside the search terms in the form nsfw:$SURFRAW_reddit_nsfw . This is common search syntax. --describe=nsfw:'Whether to include NSFW posts' : this overrides the description for the -nsfw= option. Run ./reddit -lh to see it. -flair= \u00b6 --anything=flair: : this defines an option that has a value that the elvis doesn\u2019t check. This is a useful catch-all option type that works very well for this elvis because Reddit flairs can really be anything . --inline=flair:flair : like -nsfw= , this inlines the value of flair into the search terms. If flair has an empty value, it doesn\u2019t get inlined. -self= \u00b6 --collapse=self:any,:only,yes:none,no : expanding on what was said above , --collapse= can have an unlimited number of comma-delimited arguments after the first argument (which defines the variable it applies to). --inline=self:self : like the others, this is also inlined. --describe=self:'Whether to include text posts' : this overrides the description for the -self= option. Run ./reddit -lh to see it. Subreddit search \u00b6 www.reddit.com/r/${SURFRAW_reddit_subreddit:-all} www.reddit.com/r/${SURFRAW_reddit_subreddit:-all}/search?restrict_sr=1& --description='Search posts in a subreddit' --anything=subreddit:all --alias=search:subreddit:anything --describe=subreddit:'Set subreddit to search in; \"all\" is a global search' --flag=global:subreddit:all --enum=sort:relevance:relevance,hot,top,new,comments --map=sort:sort --enum=time:all-time:hour,day,week,year,all-time --collapse=time:all-time,all --map=time:t --yes-no=nsfw:no --inline=nsfw:nsfw --describe=nsfw:'Whether to include NSFW posts' --anything=flair: --inline=flair:flair --enum=self:any:any,only,none --collapse=self:any,:only,yes:none,no --inline=self:self --describe=self:'Whether to include text posts' --query-parameter=q This expands our elvis from only searching globally to searching globally or in one subreddit, defaulting to all (i.e., r/all )\u2013using a -subreddit= option. --alias=search:subreddit:anything \u00b6 This defines an alias, -search= (a common option for elvi), to the -subreddit= option. The anything as the third argument is needed because aliases can target options like -foo= and -foo , which mkelvis distinguishes\u2013one takes a value, and the other is an alias to an option that does take a value. This anything argument is called a \u201ctypename\u201d. See the reference for the details. These value- and non-value-taking versions can co-exist with the same names. --flag=global:subreddit:all \u00b6 This defines an alias to -subreddit=all for quick access to r/all (if it\u2019s needed for some reason). You could replace this with your favourite subreddit and you won\u2019t have to type the -subreddit= prefix all the time. www.reddit.com/r/${SURFRAW_reddit_subreddit:-all} (base url) \u00b6 At this point, any variables defined by the elvis will have their final values after validating and collapsing. The base URL text is placed in the elvis inside double quotes, so parameter expansions and command substitutions are available. It\u2019s placed like so (without escaping or validating\u2013so be careful!): w3_browse_url \"YOUR_BASE_URL\" Note that this parameter expansion is visible in the surfraw -elvi output. (For your elvi, please stick to POSIX shell since surfraw is a POSIX shell program. We want elvi to be usable everywhere.) www.reddit.com/r/${SURFRAW_reddit_subreddit:-all}/search?restrict_sr=1& (search url) \u00b6 Like in the base URL, any variables will have their final values at this point and the search URL text is available for interaction by the shell: w3_browse_url \"YOUR_SEARCH_URL\" By the time w3_browse_url is called, the search URL will have any mappings and inlines, and the search terms placed within it. Note that this search URL has an & at the end. This is because every search is restricted to the subreddit using the restrict_sr query parameter. mkelvis doesn\u2019t care if there are already query parameters in the search URL\u2013it just places its own mappings after it. Swappable domain \u00b6 # you can place these in quotes if you want # it's only needed if the urls contain whitespace--since we use `xargs` ${SURFRAW_reddit_site}/r/${SURFRAW_reddit_subreddit:-all} ${SURFRAW_reddit_site}/r/${SURFRAW_reddit_subreddit:-all}/search?restrict_sr=1& --description='Search posts in a subreddit' --enum=site:reddit:reddit,oldreddit --collapse=site:reddit,www.reddit.com:oldreddit,old.reddit.com --anything=subreddit:all --alias=search:subreddit:anything --describe=subreddit:'Set subreddit to search in; \"all\" is a global search' --flag=global:subreddit:all --enum=sort:relevance:relevance,hot,top,new,comments --map=sort:sort --enum=time:all-time:hour,day,week,year,all-time --collapse=time:all-time,all --map=time:t --yes-no=nsfw:no --inline=nsfw:nsfw --describe=nsfw:'Whether to include NSFW posts' --anything=flair: --inline=flair:flair --enum=self:any:any,only,none --collapse=self:any,:only,yes:none,no --inline=self:self --describe=self:'Whether to include text posts' --num-tabs=2 --query-parameter=q Finally, this allows us to switch between the default Reddit interface at www.reddit.com and the classic interface at old.reddit.com \u2013using a -site= option. Both URLs now replace their www.reddit.com prefix with a parameter expansion. We also use --num-tabs=2 to align the description of the elvis with that of other elvi in surfraw -elvi . Done! You can play around with it and its options, and read the elvis code (it has lots of nice comments). Now run ./reddit -lh and see the output of a nice elvis: Usage: reddit [options] [search words]... Description: Search posts in a subreddit (${SURFRAW_reddit_site}/r/${SURFRAW_reddit_subreddit:-all}) Local options: -nsfw=NSFW Whether to include NSFW posts Default: no Environment: SURFRAW_reddit_nsfw -site=SITE An enum option for 'site' reddit | oldreddit | Default: reddit Environment: SURFRAW_reddit_site -sort=SORT An enum option for 'sort' relevance | hot | top | new | comments | Default: relevance Environment: SURFRAW_reddit_sort -time=TIME An enum option for 'time' hour | day | week | year | all-time | Default: all-time Environment: SURFRAW_reddit_time -self=SELF Whether to include text posts any | only | none | Default: any Environment: SURFRAW_reddit_self -search=SUBREDDIT, -subreddit=SUBREDDIT Set subreddit to search in; \"all\" is a global search Default: all Environment: SURFRAW_reddit_subreddit -flair=FLAIR An unchecked option for 'flair' Default: Environment: SURFRAW_reddit_flair -global An alias for -subreddit=all See the reference for the details on individual options to mkelvis . Making many elvi at once \u00b6 mkelvis only generates one elvis per invocation (KISS!), leaving the user free to decide how they want to create many of them. An example follows. If there are lots of simple elvi, a single text file is enough. It will be called elvi.in here. First, specify the elvi you want by putting the arguments to mkelvis for each elvis on separate lines. The name should have no whitespace. Example elvi.in file: reddit www.reddit.com www.reddit.com/search?q= subreddit www.reddit.com www.reddit.com/subreddits/search?q= --description='Visit a subreddit' A possible Makefile : .PHONY: all elvi all: elvi elvi: elvi.in xargs -L 1 mkelvis < $< Note that after running make , the current directory will be filled with elvi. You could modify this so that each elvis has a suffix like .elvis to manage them easier. See my elvi repo for more examples.","title":"Advanced usage"},{"location":"advanced-usage/#advanced-usage","text":"","title":"Advanced usage"},{"location":"advanced-usage/#elvi-with-search-options","text":"mkelvis allows you to create elvi with options like -sort= and -results=NUM seen in many existing elvi. We\u2019ll create an elvis for Reddit\u2013starting simple and building up functionality. The end-result is based on commit a8ec5a7833e44df9cc3d9f56dc6cf7aa69d13e8c from my elvi repo . Name your file reddit.in and create a Makefile with these contents: reddit: reddit.in grep -v '^[[:space:]]*\\#' < $< | xargs mkelvis $@ Including the elvis name in the command means that we don\u2019t have to include them in the file. This makes expanding this to more elvi easier. The grep call also allows line comments with # .","title":"Elvi with search options"},{"location":"advanced-usage/#bookmark-like-elvis","text":"www.reddit.com www.reddit.com/search?q= --description='Search Reddit' This doesn\u2019t give us much more than the bookmarks that surfraw allows: a line of reddit https://www.reddit.com/search?q=%s in your bookmarks file would be enough to reimplement this. The --description= isn\u2019t strictly needed since it defaults to Search $elvisname .","title":"Bookmark-like elvis"},{"location":"advanced-usage/#sorting-and-date-restricting","text":"www.reddit.com www.reddit.com/search? --description='Search Reddit' --enum=sort:relevance:relevance,hot,top,new,comments --map=sort:sort --enum=time:all-time:hour,day,week,year,all-time --collapse=time:all-time,all --map=time:t --query-parameter=q This provides -sort= and -time= options to define how the search is sorted and how far back you want your results to be. Run ./reddit -lh and you\u2019ll see it nicely formatted for you with your options: Usage: reddit [options] [search words]... Description: Search Reddit (www.reddit.com) Local options: -sort=SORT An enum option for 'sort' relevance | hot | top | new | comments | Default: relevance Environment: SURFRAW_reddit_sort -time=TIME An enum option for 'time' hour | day | week | year | all-time | Default: all-time Environment: SURFRAW_reddit_time We can override the descriptions and metavars of options with --describe= and --metavar= respectively. We\u2019ll do that later.","title":"Sorting and date-restricting"},{"location":"advanced-usage/#-sort","text":"--enum=sort:relevance:relevance,hot,top,new,comments : this defines the -sort= option, says the default value is relevance , and then defines all of the valid values: relevance , hot , top , new , and comments . The default ( relevance ) must be included in that list of valid values. mkelvis will exit with an error otherwise. --map=sort:sort : this says that it\u2019s mapping the sort variable (defined above, but order doesn\u2019t matter) to the sort URL query string parameter. In the URL, it will appear like sort=$SURFRAW_reddit_sort .","title":"-sort="},{"location":"advanced-usage/#-time","text":"--enum=time:all-time:hour,day,week,year,all-time : this defines the date-restricting option you can see on Reddit. Like with sort , we can see that it defaults to all-time \u2013out of hour , day , week , year , all-time . --map=time:t : it\u2019s mapped to the t parameter. --collapse=time:all-time,all : this says that if the time variable has the exact value of all-time , it should be replaced with all . This allows us to define a nicer interface for our elvis\u2013not being bound to what the search engine\u2019s parameter values actually are. In fact, each colon-delimited ( : ) argument after the first one can be comma-delimited ( , ) lists of patterns describing these changes. See the reference for more. Now, a problem with our previous version is that it would be hard for mkelvis to decide what order to append the mappings and the search terms in. The --query-parameter/-Q option solves this for us. The q= suffix can now be removed from the search URL because this will be appended to it later.","title":"-time="},{"location":"advanced-usage/#keyword-search","text":"www.reddit.com www.reddit.com/search? --description='Search Reddit' --enum=sort:relevance:relevance,hot,top,new,comments --map=sort:sort --enum=time:all-time:hour,day,week,year,all-time --collapse=time:all-time,all --map=time:t --yes-no=nsfw:no --inline=nsfw:nsfw --describe=nsfw:'Whether to include NSFW posts' --anything=flair: --inline=flair:flair --enum=self:any:any,only,none --collapse=self:any,:only,yes:none,no --inline=self:self --describe=self:'Whether to include text posts' --query-parameter=q This gives us an elvis that unifies the syntax of searches with URL query parameters and searches with keywords such as site:github.com to limit results to github.com .","title":"Keyword search"},{"location":"advanced-usage/#-nsfw","text":"--yes-no=nsfw:no : this defines a boolean option, corresponding to the values that have the surfraw functions ok , yesno , ifyes , and ifno , called on it. It\u2019s called nsfw , and has a default value of no . In the elvis, you\u2019d be able to use -nsfw=yes , -nsfw=no , -nsfw=on , -nsfw=off , -nsfw=1 , -nsfw=0 . They\u2019re treated the same. --inline=nsfw:nsfw : this places the value of nsfw inside the search terms in the form nsfw:$SURFRAW_reddit_nsfw . This is common search syntax. --describe=nsfw:'Whether to include NSFW posts' : this overrides the description for the -nsfw= option. Run ./reddit -lh to see it.","title":"-nsfw="},{"location":"advanced-usage/#-flair","text":"--anything=flair: : this defines an option that has a value that the elvis doesn\u2019t check. This is a useful catch-all option type that works very well for this elvis because Reddit flairs can really be anything . --inline=flair:flair : like -nsfw= , this inlines the value of flair into the search terms. If flair has an empty value, it doesn\u2019t get inlined.","title":"-flair="},{"location":"advanced-usage/#-self","text":"--collapse=self:any,:only,yes:none,no : expanding on what was said above , --collapse= can have an unlimited number of comma-delimited arguments after the first argument (which defines the variable it applies to). --inline=self:self : like the others, this is also inlined. --describe=self:'Whether to include text posts' : this overrides the description for the -self= option. Run ./reddit -lh to see it.","title":"-self="},{"location":"advanced-usage/#subreddit-search","text":"www.reddit.com/r/${SURFRAW_reddit_subreddit:-all} www.reddit.com/r/${SURFRAW_reddit_subreddit:-all}/search?restrict_sr=1& --description='Search posts in a subreddit' --anything=subreddit:all --alias=search:subreddit:anything --describe=subreddit:'Set subreddit to search in; \"all\" is a global search' --flag=global:subreddit:all --enum=sort:relevance:relevance,hot,top,new,comments --map=sort:sort --enum=time:all-time:hour,day,week,year,all-time --collapse=time:all-time,all --map=time:t --yes-no=nsfw:no --inline=nsfw:nsfw --describe=nsfw:'Whether to include NSFW posts' --anything=flair: --inline=flair:flair --enum=self:any:any,only,none --collapse=self:any,:only,yes:none,no --inline=self:self --describe=self:'Whether to include text posts' --query-parameter=q This expands our elvis from only searching globally to searching globally or in one subreddit, defaulting to all (i.e., r/all )\u2013using a -subreddit= option.","title":"Subreddit search"},{"location":"advanced-usage/#-aliassearchsubredditanything","text":"This defines an alias, -search= (a common option for elvi), to the -subreddit= option. The anything as the third argument is needed because aliases can target options like -foo= and -foo , which mkelvis distinguishes\u2013one takes a value, and the other is an alias to an option that does take a value. This anything argument is called a \u201ctypename\u201d. See the reference for the details. These value- and non-value-taking versions can co-exist with the same names.","title":"--alias=search:subreddit:anything"},{"location":"advanced-usage/#-flagglobalsubredditall","text":"This defines an alias to -subreddit=all for quick access to r/all (if it\u2019s needed for some reason). You could replace this with your favourite subreddit and you won\u2019t have to type the -subreddit= prefix all the time.","title":"--flag=global:subreddit:all"},{"location":"advanced-usage/#wwwredditcomrsurfraw_reddit_subreddit-all-base-url","text":"At this point, any variables defined by the elvis will have their final values after validating and collapsing. The base URL text is placed in the elvis inside double quotes, so parameter expansions and command substitutions are available. It\u2019s placed like so (without escaping or validating\u2013so be careful!): w3_browse_url \"YOUR_BASE_URL\" Note that this parameter expansion is visible in the surfraw -elvi output. (For your elvi, please stick to POSIX shell since surfraw is a POSIX shell program. We want elvi to be usable everywhere.)","title":"www.reddit.com/r/${SURFRAW_reddit_subreddit:-all} (base url)"},{"location":"advanced-usage/#wwwredditcomrsurfraw_reddit_subreddit-allsearchrestrict_sr1-search-url","text":"Like in the base URL, any variables will have their final values at this point and the search URL text is available for interaction by the shell: w3_browse_url \"YOUR_SEARCH_URL\" By the time w3_browse_url is called, the search URL will have any mappings and inlines, and the search terms placed within it. Note that this search URL has an & at the end. This is because every search is restricted to the subreddit using the restrict_sr query parameter. mkelvis doesn\u2019t care if there are already query parameters in the search URL\u2013it just places its own mappings after it.","title":"www.reddit.com/r/${SURFRAW_reddit_subreddit:-all}/search?restrict_sr=1&amp; (search url)"},{"location":"advanced-usage/#swappable-domain","text":"# you can place these in quotes if you want # it's only needed if the urls contain whitespace--since we use `xargs` ${SURFRAW_reddit_site}/r/${SURFRAW_reddit_subreddit:-all} ${SURFRAW_reddit_site}/r/${SURFRAW_reddit_subreddit:-all}/search?restrict_sr=1& --description='Search posts in a subreddit' --enum=site:reddit:reddit,oldreddit --collapse=site:reddit,www.reddit.com:oldreddit,old.reddit.com --anything=subreddit:all --alias=search:subreddit:anything --describe=subreddit:'Set subreddit to search in; \"all\" is a global search' --flag=global:subreddit:all --enum=sort:relevance:relevance,hot,top,new,comments --map=sort:sort --enum=time:all-time:hour,day,week,year,all-time --collapse=time:all-time,all --map=time:t --yes-no=nsfw:no --inline=nsfw:nsfw --describe=nsfw:'Whether to include NSFW posts' --anything=flair: --inline=flair:flair --enum=self:any:any,only,none --collapse=self:any,:only,yes:none,no --inline=self:self --describe=self:'Whether to include text posts' --num-tabs=2 --query-parameter=q Finally, this allows us to switch between the default Reddit interface at www.reddit.com and the classic interface at old.reddit.com \u2013using a -site= option. Both URLs now replace their www.reddit.com prefix with a parameter expansion. We also use --num-tabs=2 to align the description of the elvis with that of other elvi in surfraw -elvi . Done! You can play around with it and its options, and read the elvis code (it has lots of nice comments). Now run ./reddit -lh and see the output of a nice elvis: Usage: reddit [options] [search words]... Description: Search posts in a subreddit (${SURFRAW_reddit_site}/r/${SURFRAW_reddit_subreddit:-all}) Local options: -nsfw=NSFW Whether to include NSFW posts Default: no Environment: SURFRAW_reddit_nsfw -site=SITE An enum option for 'site' reddit | oldreddit | Default: reddit Environment: SURFRAW_reddit_site -sort=SORT An enum option for 'sort' relevance | hot | top | new | comments | Default: relevance Environment: SURFRAW_reddit_sort -time=TIME An enum option for 'time' hour | day | week | year | all-time | Default: all-time Environment: SURFRAW_reddit_time -self=SELF Whether to include text posts any | only | none | Default: any Environment: SURFRAW_reddit_self -search=SUBREDDIT, -subreddit=SUBREDDIT Set subreddit to search in; \"all\" is a global search Default: all Environment: SURFRAW_reddit_subreddit -flair=FLAIR An unchecked option for 'flair' Default: Environment: SURFRAW_reddit_flair -global An alias for -subreddit=all See the reference for the details on individual options to mkelvis .","title":"Swappable domain"},{"location":"advanced-usage/#making-many-elvi-at-once","text":"mkelvis only generates one elvis per invocation (KISS!), leaving the user free to decide how they want to create many of them. An example follows. If there are lots of simple elvi, a single text file is enough. It will be called elvi.in here. First, specify the elvi you want by putting the arguments to mkelvis for each elvis on separate lines. The name should have no whitespace. Example elvi.in file: reddit www.reddit.com www.reddit.com/search?q= subreddit www.reddit.com www.reddit.com/subreddits/search?q= --description='Visit a subreddit' A possible Makefile : .PHONY: all elvi all: elvi elvi: elvi.in xargs -L 1 mkelvis < $< Note that after running make , the current directory will be filled with elvi. You could modify this so that each elvis has a suffix like .elvis to manage them easier. See my elvi repo for more examples.","title":"Making many elvi at once"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] \u00b6 Added \u00b6 opensearch2elvis : a program to generate elvi for OpenSearch-enabled websites. Dependency on lxml because of opensearch2elvis . Repeatable --verbose and --quiet options for mkelvis and opensearch2elvis . --no-append-mappings option for mkelvis : take control of how the search URL gets its query string params. Changed \u00b6 URLs with or without a scheme are now allowed for mkelvis . Both URLs must have the same scheme or both have no scheme. Some checks for \u201cimpossible\u201d option combinations for mkelvis were removed. The defaults are safe and the advanced user should know what they\u2019re doing. Use $it instead of $_ for implicit variables. Bash and other shells do special things with $_ , so this is the next best name. The repo now uses the name surfraw-tools : https://github.com/Hoboneer/surfraw-tools Documentation now available at https://hoboneer.github.io/surfraw-tools/ Fixed \u00b6 Disabled globbing when working with \u201clist\u201d variables in generated elvi. This caused directory contents to be exposed if a * character appeared in -add-LIST= . [0.1.0] - 2020-07-03 \u00b6 Initial release.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#added","text":"opensearch2elvis : a program to generate elvi for OpenSearch-enabled websites. Dependency on lxml because of opensearch2elvis . Repeatable --verbose and --quiet options for mkelvis and opensearch2elvis . --no-append-mappings option for mkelvis : take control of how the search URL gets its query string params.","title":"Added"},{"location":"changelog/#changed","text":"URLs with or without a scheme are now allowed for mkelvis . Both URLs must have the same scheme or both have no scheme. Some checks for \u201cimpossible\u201d option combinations for mkelvis were removed. The defaults are safe and the advanced user should know what they\u2019re doing. Use $it instead of $_ for implicit variables. Bash and other shells do special things with $_ , so this is the next best name. The repo now uses the name surfraw-tools : https://github.com/Hoboneer/surfraw-tools Documentation now available at https://hoboneer.github.io/surfraw-tools/","title":"Changed"},{"location":"changelog/#fixed","text":"Disabled globbing when working with \u201clist\u201d variables in generated elvi. This caused directory contents to be exposed if a * character appeared in -add-LIST= .","title":"Fixed"},{"location":"changelog/#010-2020-07-03","text":"Initial release.","title":"[0.1.0] - 2020-07-03"},{"location":"contributing/","text":"Contributing \u00b6 Set up a development environment \u00b6 python3 -m venv env . env/bin/activate pip install -r requirements/dev.txt pip install -e . Also ensure that you have GNU Make and (Universal) Ctags. On Debian, Ubuntu, and their derivatives: sudo apt install make universal-ctags Before submitting a pull request \u00b6 make -k format check-dev Make sure that no new errors were introduced after your changes. While editing documentation \u00b6 In a separate terminal window: mkdocs serve Open http://127.0.0.1:8000/ in your browser to view your changes as you write (it auto-reloads). Make a new release \u00b6 Rename the [Unreleased] section in CHANGELOG.md to [NEW_VERSION] - CURRENT_DATE_ISO . Create a new empty [Unreleased] section above the one renamed in step (1). Change the version number in surfraw_tools/_package.py ( __version__ ) to NEW_VERSION . If the release is in a separate year from the previous one, change the copyright years in the licence headers for each file and in .reuse/dep5 . Only do this for the files that were changed since the last release (or new ones): git log PREV_VERSION.. FILE (no entries means no changes); or haschanged.sh FILES (shows number of commits with that file since). For ease of use: get-tracked-files.sh gives you all git-tracked files For .md , .sh , .py , .toml , .yml , .cfg files, you can run: reuse addheader --copyright=\"HOLDER <EMAIL>\" --license=Apache-2.0 FILES For other files, update the header manually. Run make check-copyright to see if some files don\u2019t have a licence header\u2013go back to step (4) if some don\u2019t. Run mkdocs serve and open http://127.0.0.1:8000/ in your browser to check the docs for errors. Commit these changes. Run make clean to remove any build artifacts from previous builds. Run make dist . This has the format , check-dev , and check-copyright rules as prerequisites, and will fail if any of them do. Check that the resulting sdist has all that you need. Run make upload . Add a tag with the new version number: git tag NEW_VERSION . Push your changes: git push --tags . Run mkdocs gh-deploy to deploy docs to Github Pages. We don\u2019t build wheels because we pre-compile Jinja templates during installation for faster runtime execution. The build-time and runtime version need to match.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#set-up-a-development-environment","text":"python3 -m venv env . env/bin/activate pip install -r requirements/dev.txt pip install -e . Also ensure that you have GNU Make and (Universal) Ctags. On Debian, Ubuntu, and their derivatives: sudo apt install make universal-ctags","title":"Set up a development environment"},{"location":"contributing/#before-submitting-a-pull-request","text":"make -k format check-dev Make sure that no new errors were introduced after your changes.","title":"Before submitting a pull request"},{"location":"contributing/#while-editing-documentation","text":"In a separate terminal window: mkdocs serve Open http://127.0.0.1:8000/ in your browser to view your changes as you write (it auto-reloads).","title":"While editing documentation"},{"location":"contributing/#make-a-new-release","text":"Rename the [Unreleased] section in CHANGELOG.md to [NEW_VERSION] - CURRENT_DATE_ISO . Create a new empty [Unreleased] section above the one renamed in step (1). Change the version number in surfraw_tools/_package.py ( __version__ ) to NEW_VERSION . If the release is in a separate year from the previous one, change the copyright years in the licence headers for each file and in .reuse/dep5 . Only do this for the files that were changed since the last release (or new ones): git log PREV_VERSION.. FILE (no entries means no changes); or haschanged.sh FILES (shows number of commits with that file since). For ease of use: get-tracked-files.sh gives you all git-tracked files For .md , .sh , .py , .toml , .yml , .cfg files, you can run: reuse addheader --copyright=\"HOLDER <EMAIL>\" --license=Apache-2.0 FILES For other files, update the header manually. Run make check-copyright to see if some files don\u2019t have a licence header\u2013go back to step (4) if some don\u2019t. Run mkdocs serve and open http://127.0.0.1:8000/ in your browser to check the docs for errors. Commit these changes. Run make clean to remove any build artifacts from previous builds. Run make dist . This has the format , check-dev , and check-copyright rules as prerequisites, and will fail if any of them do. Check that the resulting sdist has all that you need. Run make upload . Add a tag with the new version number: git tag NEW_VERSION . Push your changes: git push --tags . Run mkdocs gh-deploy to deploy docs to Github Pages. We don\u2019t build wheels because we pre-compile Jinja templates during installation for faster runtime execution. The build-time and runtime version need to match.","title":"Make a new release"},{"location":"install/","text":"surfraw-tools \u00b6 See README.md for usage information. Basic installation \u00b6 You may use pip to install, but pipx is recommended. It is available in the distro repositories. pipx install surfraw-tools # or pip install --user surfraw-tools Installing with a specific version of Jinja2 \u00b6 This package depends on Jinja2 to pre-compile templates for faster runtime execution (see pyproject.toml ). These are specific to each version of Jinja2, so the build-time version and runtime version need to match. pipx places all dependencies in a virtual environment and should build with the same version of Jinja2 as at runtime\u2013which is the latest ( <4.0 ). Use pip to use a specific version. By default, pip builds packages in a separate environment. If a specific version of Jinja2 is desired, ensure that all the packages in the requires key of pyproject.toml are installed. Then: pip install --no-build-isolation surfraw-tools Local installation \u00b6 pip install . # or python setup.py install Note that the second method doesn\u2019t build a wheel. This means that\u2013at least on my machine\u2013 pkg_resources was imported by the script for the mkelvis entry point so import time was increased by over 100 ms.","title":"Installation"},{"location":"install/#surfraw-tools","text":"See README.md for usage information.","title":"surfraw-tools"},{"location":"install/#basic-installation","text":"You may use pip to install, but pipx is recommended. It is available in the distro repositories. pipx install surfraw-tools # or pip install --user surfraw-tools","title":"Basic installation"},{"location":"install/#installing-with-a-specific-version-of-jinja2","text":"This package depends on Jinja2 to pre-compile templates for faster runtime execution (see pyproject.toml ). These are specific to each version of Jinja2, so the build-time version and runtime version need to match. pipx places all dependencies in a virtual environment and should build with the same version of Jinja2 as at runtime\u2013which is the latest ( <4.0 ). Use pip to use a specific version. By default, pip builds packages in a separate environment. If a specific version of Jinja2 is desired, ensure that all the packages in the requires key of pyproject.toml are installed. Then: pip install --no-build-isolation surfraw-tools","title":"Installing with a specific version of Jinja2"},{"location":"install/#local-installation","text":"pip install . # or python setup.py install Note that the second method doesn\u2019t build a wheel. This means that\u2013at least on my machine\u2013 pkg_resources was imported by the script for the mkelvis entry point so import time was increased by over 100 ms.","title":"Local installation"},{"location":"reference/","text":"Reference \u00b6 mkelvis allows you to easily create common types of options found in surfraw elvi. Most these types validate their values at runtime. They each have a \u201ctypename\u201d which is used in some mkelvis options to disambiguate their target (e.g., --alias= ). Main elvis options \u00b6 These options create variables corresponding to their name with the pattern SURFRAW_${yourelvisname}_${thevariable} . They can\u2019t conflict. Boolean options (typename: bool , synonyms: yes-no ) \u00b6 Created with: --yes-no=VARNAME:DEFAULT This is one of the simplest option types, corresponding to the surfraw options checked with yesno in elvi. The valid arguments are (in elvi): yes , on , 1 : True no , off , 0 : False For simplicity, --yes-no only accepts yes for true and no for false. File an issue if you need the other values to be accepted. Enum options (typename: enum ) \u00b6 Created with: --enum=VARNAME:DEFAULT:VAL1,VAL2,... This is a common option type where only a fixed set of values is valid. This set of values must be specified for every enum. \u201cAnything\u201d options (typename: anything ) \u00b6 Created with: --anything=VARNAME:DEFAULT An unchecked option: the values of this type are not checked by elvi. Useful for websites whose search syntax is too complex or is really an option that could contain anything, like target users. Special options (typename: special ) \u00b6 Created with: --use-results-option (1), --use-language-option (2) Singleton options that implement behaviour common to many elvi: A -results=NUM option whose default value is taken from SURFRAW_results A -language=ISOCODE option whose default value is taken from SURFRAW_lang List options (typename: list ) \u00b6 Created with: --list=VARNAME:TYPE:DEFAULT1,DEFAULT2,...[:VALID_VALUES_IF_ENUM] An option that specifies list-like behaviour for a variable whose elements are of a single type. Generates -add-$optname= , -remove-$optname= , and -clear-$optname options for every list option. -add-$optname=VALS : Append VALS to list variable. -remove-$optname=VALS : Remove all instances of each value of VALS from list variable. -clear-$optname : Clear list variable. The valid list types are: enum anything Auxiliary elvis options \u00b6 These options help make the generated elvi quicker to use. They don\u2019t create variables. Flag options (typename: flag ) \u00b6 Created with: --flag=NAME:TARGETVAR:VALUE An alias (with a value) to one of the above options\u2013all of which create variables in the generated elvis (hereafter \u201cvariable options\u201d). This is essentially a shorthand for specifying -opt=commonval as -c , for example. Alias options (typename: alias ) \u00b6 Created with: --alias=NAME:TARGETNAME:TARGETTYPE An alias (without a value) to either a variable option or flag option. This is essentially a synonym for another option. Aliases cannot target other aliases. Since aliases can target variable options and flag options, they take a typename to disambiguate. Examples: -s : Alias for -sort (a flag) -l= : Alias for -language= . The user would still have to specify the value. Manipulating variables \u00b6 mkelvis provides a --collapse=VARNAME:VAL1,VAL2,RESULT:... option which corresponds to a shell case-statement. Each argument after VARNAME is a list where the last value ( RESULT in this case) is a shell snippet that the other values ( VAL1 and VAL2 here) are converted to. RESULT is not escaped so it can include parameter expansions and command substitutions (please stick to POSIX shell). Within RESULT , you can access $it , which is an alias for the current option\u2019s variable. The variables for the other options are in an undefined state at this point\u2013don\u2019t reference them here. This roughly corresponds to: case \"$varname\" in VAL1|VAL2) varname=\"RESULT\" ;; esac Map variables to URL \u00b6 Variables may each be \u201cmapped\u201d or \u201cinlined\u201d to a query parameter in the URL or as a keyword in the search query respectively. Mapping \u00b6 --map=VAR:PARAM[:URL_ENCODE?] Map variable VAR to PARAM like so: https://example.com/?PARAM=$VAR . If URL_ENCODE is yes (default), then the value of VAR is percent-encoded; if no then $VAR is left as it is. --list-map=VAR:PARAM[:URL_ENCODE?] Similar to --map= but VAR is treated like a list and each value is mapped to a separate PARAM query parameter. If the list is empty, then PARAM will have an empty value like so: https://example.com/?PARAM= . Inlining \u00b6 --inline=VAR:KEYWORD Inline variable VAR to KEYWORD in the search query like so: https://example.com/?q=search+arg+KEYWORD:$VAR . If $VAR has whitespace, then it will be wrapped in double quotes. If $VAR is empty, then VAR will not be inlined. --list-inline=VAR:KEYWORD Similar to --inline= but VAR is treated like a list and each value is mapped to a separate KEYWORD in the search query, double-quoting if needed (see --inline= ). If the list is empty, then VAR will not be inlined at all. Control over search URL \u00b6 Where the mappings and search terms (which includes the inlinings) are exactly placed in the URL can each be independently controlled using the --no-append-mappings and --no-append-args options respectively. Like with --collapse= , parameter expansions and command substitutions are available in the search URL string (and the base URL too). The $mappings and $it (search terms and inlinings) variables are available. You have the responsibility of ensuring that these go into the URL correctly. Miscellaneous options \u00b6 Here are some other useful options. See mkelvis --help for any others missed. --description=DESCRIPTION : Set the elvis description, excluding its domain name. --query-parameter=PARAM : Define the query parameter to be appended to the URL (mandatory if --map= or --list-map= are used). --metavar=VAR:METAVAR : Set the metavar of the variable option VAR to METAVAR (in -local-help ), which is capitalised automatically. --describe=VAR:DESCRIPTION : Set the description of the variable option VAR to DESCRIPTION (in -local-help ).","title":"Reference"},{"location":"reference/#reference","text":"mkelvis allows you to easily create common types of options found in surfraw elvi. Most these types validate their values at runtime. They each have a \u201ctypename\u201d which is used in some mkelvis options to disambiguate their target (e.g., --alias= ).","title":"Reference"},{"location":"reference/#main-elvis-options","text":"These options create variables corresponding to their name with the pattern SURFRAW_${yourelvisname}_${thevariable} . They can\u2019t conflict.","title":"Main elvis options"},{"location":"reference/#boolean-options-typename-bool-synonyms-yes-no","text":"Created with: --yes-no=VARNAME:DEFAULT This is one of the simplest option types, corresponding to the surfraw options checked with yesno in elvi. The valid arguments are (in elvi): yes , on , 1 : True no , off , 0 : False For simplicity, --yes-no only accepts yes for true and no for false. File an issue if you need the other values to be accepted.","title":"Boolean options (typename: bool, synonyms: yes-no)"},{"location":"reference/#enum-options-typename-enum","text":"Created with: --enum=VARNAME:DEFAULT:VAL1,VAL2,... This is a common option type where only a fixed set of values is valid. This set of values must be specified for every enum.","title":"Enum options (typename: enum)"},{"location":"reference/#anything-options-typename-anything","text":"Created with: --anything=VARNAME:DEFAULT An unchecked option: the values of this type are not checked by elvi. Useful for websites whose search syntax is too complex or is really an option that could contain anything, like target users.","title":"\"Anything\" options (typename: anything)"},{"location":"reference/#special-options-typename-special","text":"Created with: --use-results-option (1), --use-language-option (2) Singleton options that implement behaviour common to many elvi: A -results=NUM option whose default value is taken from SURFRAW_results A -language=ISOCODE option whose default value is taken from SURFRAW_lang","title":"Special options (typename: special)"},{"location":"reference/#list-options-typename-list","text":"Created with: --list=VARNAME:TYPE:DEFAULT1,DEFAULT2,...[:VALID_VALUES_IF_ENUM] An option that specifies list-like behaviour for a variable whose elements are of a single type. Generates -add-$optname= , -remove-$optname= , and -clear-$optname options for every list option. -add-$optname=VALS : Append VALS to list variable. -remove-$optname=VALS : Remove all instances of each value of VALS from list variable. -clear-$optname : Clear list variable. The valid list types are: enum anything","title":"List options (typename: list)"},{"location":"reference/#auxiliary-elvis-options","text":"These options help make the generated elvi quicker to use. They don\u2019t create variables.","title":"Auxiliary elvis options"},{"location":"reference/#flag-options-typename-flag","text":"Created with: --flag=NAME:TARGETVAR:VALUE An alias (with a value) to one of the above options\u2013all of which create variables in the generated elvis (hereafter \u201cvariable options\u201d). This is essentially a shorthand for specifying -opt=commonval as -c , for example.","title":"Flag options (typename: flag)"},{"location":"reference/#alias-options-typename-alias","text":"Created with: --alias=NAME:TARGETNAME:TARGETTYPE An alias (without a value) to either a variable option or flag option. This is essentially a synonym for another option. Aliases cannot target other aliases. Since aliases can target variable options and flag options, they take a typename to disambiguate. Examples: -s : Alias for -sort (a flag) -l= : Alias for -language= . The user would still have to specify the value.","title":"Alias options (typename: alias)"},{"location":"reference/#manipulating-variables","text":"mkelvis provides a --collapse=VARNAME:VAL1,VAL2,RESULT:... option which corresponds to a shell case-statement. Each argument after VARNAME is a list where the last value ( RESULT in this case) is a shell snippet that the other values ( VAL1 and VAL2 here) are converted to. RESULT is not escaped so it can include parameter expansions and command substitutions (please stick to POSIX shell). Within RESULT , you can access $it , which is an alias for the current option\u2019s variable. The variables for the other options are in an undefined state at this point\u2013don\u2019t reference them here. This roughly corresponds to: case \"$varname\" in VAL1|VAL2) varname=\"RESULT\" ;; esac","title":"Manipulating variables"},{"location":"reference/#map-variables-to-url","text":"Variables may each be \u201cmapped\u201d or \u201cinlined\u201d to a query parameter in the URL or as a keyword in the search query respectively.","title":"Map variables to URL"},{"location":"reference/#mapping","text":"--map=VAR:PARAM[:URL_ENCODE?] Map variable VAR to PARAM like so: https://example.com/?PARAM=$VAR . If URL_ENCODE is yes (default), then the value of VAR is percent-encoded; if no then $VAR is left as it is. --list-map=VAR:PARAM[:URL_ENCODE?] Similar to --map= but VAR is treated like a list and each value is mapped to a separate PARAM query parameter. If the list is empty, then PARAM will have an empty value like so: https://example.com/?PARAM= .","title":"Mapping"},{"location":"reference/#inlining","text":"--inline=VAR:KEYWORD Inline variable VAR to KEYWORD in the search query like so: https://example.com/?q=search+arg+KEYWORD:$VAR . If $VAR has whitespace, then it will be wrapped in double quotes. If $VAR is empty, then VAR will not be inlined. --list-inline=VAR:KEYWORD Similar to --inline= but VAR is treated like a list and each value is mapped to a separate KEYWORD in the search query, double-quoting if needed (see --inline= ). If the list is empty, then VAR will not be inlined at all.","title":"Inlining"},{"location":"reference/#control-over-search-url","text":"Where the mappings and search terms (which includes the inlinings) are exactly placed in the URL can each be independently controlled using the --no-append-mappings and --no-append-args options respectively. Like with --collapse= , parameter expansions and command substitutions are available in the search URL string (and the base URL too). The $mappings and $it (search terms and inlinings) variables are available. You have the responsibility of ensuring that these go into the URL correctly.","title":"Control over search URL"},{"location":"reference/#miscellaneous-options","text":"Here are some other useful options. See mkelvis --help for any others missed. --description=DESCRIPTION : Set the elvis description, excluding its domain name. --query-parameter=PARAM : Define the query parameter to be appended to the URL (mandatory if --map= or --list-map= are used). --metavar=VAR:METAVAR : Set the metavar of the variable option VAR to METAVAR (in -local-help ), which is capitalised automatically. --describe=VAR:DESCRIPTION : Set the description of the variable option VAR to DESCRIPTION (in -local-help ).","title":"Miscellaneous options"}]}